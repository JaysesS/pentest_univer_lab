import mysql.connector as mariadb
import re, sys, os
from functools import wraps

USER = "jayse"
PASSWORD = "1337"
DATABASE_NAME = "pentest"
TABLE_MAIN = "Users"
TABLE_DEFENSE = "Defense"

type_function = {
    'LOGIN' : 'check_user',
    'CHECK' : 'get_vuln',
    'FILE' : 'get_file',
    'MONEY USER' : 'transfer_money',
    'INFO' : 'update_vuln',
    'DB CLEAR' : 'clear_table',
    'DB REFILL' : 'refill',
    'MONEY ADMIN' : 'transfer_admin_money'
}

class Database():

    def __init__(self):
        self.user = USER
        self.password = PASSWORD
        self.table_main = TABLE_MAIN
        self.table_defense = TABLE_DEFENSE
        self.database_name = DATABASE_NAME

    def get_type_func(self, namefunc):
        for k , v in type_function.items():
            if namefunc == v:
                return k
        return "NON TYPED"

    def log(fn):
        @wraps(fn)
        def wrapper(self, *args, **kwargs):
            lf = open('/var/www/PentestApp/PentestApp/logs/log.txt', 'a')
            res = fn(self, *args, **kwargs)
            lf.write("[ {} ] f: {} | args: {} | return: {}\n".format(self.get_type_func(fn.__name__), str(fn.__name__),str([args[x] for x in range(len(args) - 2)]), str(res).replace('\n', ' ')))
            return res
        return wrapper

    def create_db_connect(fn):
        def wrapper(self, *args, **kwargs):
            db = mariadb.connect(user=self.user, password=self.password, database=self.database_name)
            cursor = db.cursor()
            new_args = args + (db, cursor)
            res = fn(self, *new_args, **kwargs)
            db.close()
            return res
        return wrapper
    
    def fix_vuln_check_user(fn):
        @wraps(fn)
        def wrapper(self, *args, **kwargs):
            sett_vuln = self.get_vuln()[0][1]
            if sett_vuln == 1:
                if re.match(r'\w', args[0]) and re.match(r'\w', args[1]):
                    return fn(self, *args, **kwargs)
                else:
                    return "Only letters and digits!"
            else:
                return fn(self, *args, **kwargs)
        return wrapper
    
    def fix_vuln_transfer_money(fn):
        @wraps(fn)
        def wrapper(self, *args, **kwargs):
            sett_vuln = self.get_vuln()[1][1]
            if sett_vuln == 1:
                if int(args[2]) > 0 and self.get_money(args[0]) - int(args[2]) >= 0:
                    return fn(self, args[0], args[1], args[2], db = None, cursor = None)
            else:
                return fn(self, *args, **kwargs)
        return wrapper

    def fix_vuln_file(fn):
        @wraps(fn)
        def wrapper(self, *args, **kwargs):
            sett_vuln = self.get_vuln()[2][1]
            if sett_vuln == 1:
                check_path = str(args[0]).split('data')[0]
                if '..' not in check_path and 'flag' not in check_path:
                    return fn(self, *args, **kwargs) 
                else:
                    vuln = True
                    new_args = args + (vuln,)
                    return fn(self, *new_args, **kwargs)
            else:
                try:
                    return fn(self, *args, **kwargs)
                except Exception:
                    return "File is not found.."
        return wrapper

    @create_db_connect
    @log
    def update_vuln(self, vuln, switch, db = None, cursor = None):
        switch = 0 if switch is None else 1
        command = "UPDATE %s SET switch = %s WHERE vuln = \"%s\";" % (self.table_defense, switch, vuln)
        cursor.execute(command)
        db.commit()
    
    @create_db_connect
    def get_vuln(self, db = None, cursor = None):
        command = "SELECT * FROM %s;" % (self.table_defense)
        cursor.execute(command)
        res = [x for x in cursor]
        return res

    @create_db_connect
    def view_all(self, db = None, cursor = None):
        command = "SELECT * FROM %s;" % self.table_main
        cursor.execute(command)
        for data in cursor:
            print(data)

    @create_db_connect
    def get_all(self, db = None, cursor = None):
        command = "SELECT * FROM %s;" % (self.table_main)
        cursor.execute(command)
        return [data for data in cursor]
    
    @create_db_connect
    def create_table(self, new_name_table, db = None, cursor = None):
        command = "DROP TABLE %s;" % (self.table_main)
        cursor.execute(command)
        command = "CREATE TABLE %s (id int NOT NULL AUTO_INCREMENT, username char(30) NOT NULL, password char(30) NOT NULL, money int NOT NULL, PRIMARY KEY(id));" % new_name_table
        cursor.execute(command)
        self.table_main = new_name_table
        db.commit()

    @create_db_connect
    def register_user(self, username, password, db = None, cursor = None):
        command = "INSERT INTO %s (username,password, money) VALUES ('%s', '%s', 0);" % (self.table_main, username, password)
        cursor.execute(command)
        db.commit()
    
    @fix_vuln_file
    @create_db_connect
    @log
    def get_file(self, filename, db = None, cursor = None, vuln = False):
        if vuln is False:
            command = "SELECT LOAD_FILE('../../../../../var/www/PentestApp/PentestApp/data/%s');" % (filename)
            cursor.execute(command)
            return [x for x in cursor][0][0].decode()
        else:
            return 'Haha, gl c:'

    @fix_vuln_check_user
    @create_db_connect
    @log
    def check_user(self, username, password, db = None, cursor = None):
        command = "SELECT * FROM %s WHERE username = \"%s\" AND password = \"%s\"" % (self.table_main, username, password)
        cursor.execute(command)
        return [data for data in cursor]
    
    @create_db_connect
    def check_password(self, username, oldpassword, db = None, cursor = None):
        command = "SELECT password FROM %s WHERE username = \"%s\";" % (self.table_main, username)
        cursor.execute(command)
        res = [x for x in cursor]
        if len(res) > 0:
            if res[0][0] == oldpassword:
                return True
        return False
    
    @create_db_connect
    def check_username(self, username, db = None, cursor = None):
        command = "SELECT * FROM %s WHERE username = \"%s\";" % (self.table_main, username)
        cursor.execute(command)
        res = [x for x in cursor]
        if len(res) > 0:
            return True
        return False
    
    @create_db_connect
    @log
    def transfer_admin_money(self, username_reciver, money, db = None, cursor = None):
        username_reciver_money = self.get_money(username_reciver) + int(money)
        self.update_money(username_reciver, username_reciver_money)
        db.commit()

    @fix_vuln_transfer_money
    @create_db_connect
    @log
    def transfer_money(self, username_sender, username_reciver, money, db = None, cursor = None):
        username_sender_money = self.get_money(username_sender) - int(money)
        username_reciver_money = self.get_money(username_reciver) + int(money)
        self.update_money(username_sender, username_sender_money)
        self.update_money(username_reciver, username_reciver_money)
        db.commit()

    @create_db_connect
    def get_money(self, username, db = None, cursor = None):
        command = "SELECT money FROM %s WHERE username = \"%s\";" % (self.table_main, username)
        cursor.execute(command)
        try:
            res = int([x for x in cursor][0][0])
        except IndexError as e:
            return 0
        else:
            return res

    @create_db_connect
    def update_money(self, username, money, db = None, cursor = None):
        command = "UPDATE %s SET money = \"%s\" WHERE username = \"%s\";" % (self.table_main, money, username)
        cursor.execute(command)
        db.commit()

    @create_db_connect
    def update_username(self, username, newusername, db = None, cursor = None):
        command = "UPDATE %s SET username = \"%s\" WHERE username = \"%s\";" % (self.table_main, newusername, username)
        cursor.execute(command)
        db.commit()

    @create_db_connect
    def update_password(self, username, newpassword, db = None, cursor = None):
        command = "UPDATE %s SET password = \"%s\" WHERE username = \"%s\";" % (self.table_main, newpassword, username)
        cursor.execute(command)
        db.commit()

    @create_db_connect
    @log
    def clear_table(self, db = None, cursor = None):
        command = "TRUNCATE TABLE %s;" % self.table_main
        cursor.execute(command)
        db.commit()
        self.register_user("Admin", "penctf{such_@_g0d_p4ss}")
        self.update_money("Admin", "1337")

    @log
    def refill(self):
        self.clear_table()
        self.register_user("Jayse", "nene")
        self.register_user("Koban4ik", "dadaon")
        self.register_user("Yosum", "dada")
        self.update_money("Jayse", "777")
        self.update_money("Yosum", "666")
        self.update_money("Koban4ik", "322")


# vuln
# -----------
# db.check_user("\" or \"\"=\"", "\" or \"\"=\"")
# username = " or ""="
# password = " or ""="
# result SELECT * FROM info WHERE username = "" or ""="" AND password = "" or ""=""
# The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.
# fix by @fix_vuln_check_user
# -----------
# select load_file('../../../../../../../../../../../etc/passwd')


