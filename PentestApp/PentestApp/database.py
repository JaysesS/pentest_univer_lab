import mysql.connector as mariadb
import re

class Database():

    def __init__(self, user, password, database_name, table_name):
        self.user = user
        self.password = password
        self.database_name = database_name
        self.table_name = table_name
        self.db = mariadb.connect(user=self.user, password=self.password, database=self.database_name)
        self.cursor = self.db.cursor()
    
    def fix_vuln_check_user(fn):
        def wrapper(self, username, password):
            if re.match(r'\w', username) and re.match(r'\w', password):
                return fn(self, username, password)
            else:
                return "Only letters and digits!"
        return wrapper

    def view_all(self):
        command = "SELECT * FROM %s;" % self.table_name
        self.cursor.execute(command)
        for data in self.cursor:
            print(data)

    def get_all(self):
        command = "SELECT * FROM %s;" % (self.table_name)
        self.cursor.execute(command)
        return [data for data in self.cursor]
    
    def create_table(self, new_name_table):
        command = "DROP TABLE %s;" % (self.table_name)
        self.cursor.execute(command)
        command = "CREATE TABLE %s (id int NOT NULL AUTO_INCREMENT, username char(30) NOT NULL, password char(30) NOT NULL, money int NOT NULL, PRIMARY KEY(id));" % new_name_table
        self.cursor.execute(command)
        self.table_name = new_name_table
        self.db.commit()

    def register_user(self, username, password):
        command = "INSERT INTO %s (username,password, money) VALUES ('%s', '%s', 0);" % (self.table_name, username, password)
        self.cursor.execute(command)
        self.db.commit()
    
    # @fix_vuln_check_user
    def check_user(self, username, password):
        command = "SELECT * FROM %s WHERE username = \"%s\" AND password = \"%s\"" % (self.table_name, username, password)
        self.cursor.execute(command)
        return [data for data in self.cursor]
    
    def get_gift(self, number):
        command = "SELECT LOAD_FILE('/var/www/PentestApp/PentestApp/data/%s');" % number
        print(command)
        self.cursor.execute(command)
        for i in self.cursor:
            print(i)
    
    def check_password(self, username, oldpassword):
        command = "SELECT password FROM %s WHERE username = \"%s\";" % (self.table_name, username)
        self.cursor.execute(command)
        res = [x for x in self.cursor]
        if len(res) > 0:
            if res[0][0] == oldpassword:
                return True
        return False

    def update_username(self, username, newusername):
        command = "UPDATE %s SET username = \"%s\" WHERE username = \"%s\";" % (self.table_name, newusername, username)
        self.cursor.execute(command)
        self.db.commit()

    def update_password(self, username, newpassword):
        command = "UPDATE %s SET password = \"%s\" WHERE username = \"%s\";" % (self.table_name, newpassword, username)
        self.cursor.execute(command)
        self.db.commit()

    def clear_table(self):
        command = "TRUNCATE TABLE %s;" % self.table_name
        self.cursor.execute(command)
        self.db.commit()

    def refill(self):
        self.clear_table()
        self.register_user("vlad", "1999")
        self.register_user("Admin", "superpass")
        self.register_user("Koban4ik", "dadaon")

# db = Database("jayse", "1337", "pentest", "info")
# db.refill()
# print(db.check_user("admin", "superpa222ss"))
# print(db.check_user("\" or \"\"=\"", "\" or \"\"=\""))
# print(db.check_user_by_id("2\"; SELECT * FROM info WHERE username = \"\" or \"\"=\"\" AND password = \"\" or \"\"=\"\""))
# db.get_gift("../../../../../../../../etc/passwd")



# vuln
# -----------
# db.check_user("\" or \"\"=\"", "\" or \"\"=\"")
# username = " or ""="
# password = " or ""="
# result SELECT * FROM info WHERE username = "" or ""="" AND password = "" or ""=""
# The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.
# fix by @fix_vuln_check_user
# -----------
# select load_file('../../../../../../../../../../../etc/passwd')


