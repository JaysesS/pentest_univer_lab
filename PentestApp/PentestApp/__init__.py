from flask import Flask, render_template, json, request, session, redirect, url_for
import os, sys

from database import Database

db = Database()

app = Flask(__name__)

def get_logs():
    lf = open('/var/www/PentestApp/PentestApp/logs/log.txt', 'r').readlines()
    lf.reverse()
    if len(lf) > 0:
        if len(lf) >= 5:
            return [lf[x] for x in range(5)]
        else:
            return [lf[x] for x in range(len(lf))]
    else:
        return []

@app.route('/get_logs_refresh', methods=['POST', 'GET'])
def get_logs_refresh():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            logs = list()
            if request.method == "POST":
                logs = get_logs()
            defense = dict(db.get_vuln())
            return render_template('panel.html', users = db.get_all(), defense = defense, logs = logs)
    return redirect(url_for('login'))
@app.route('/defense_level', methods=['POST', 'GET'])
def defense_level():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            defense = dict(db.get_vuln())
            if request.method == 'POST':
                sett_vuln = {'level_login': request.form.get('level_login'), 'level_money': request.form.get('level_money'), 'level_file': request.form.get('level_file')}
                for k,v in sett_vuln.items():
                    db.update_vuln(k, v)
            defense = dict(db.get_vuln())
            return render_template('panel.html', users = db.get_all(), defense = defense, logs = get_logs())
    return redirect(url_for('login'))

@app.route('/buyflag', methods=['POST', 'GET'])
def buyflag():
    if session.get('logged_in'):
        changes = list()
        money = db.get_money(session['username'])
        if request.method == 'POST':
            if money >= 5000:
                changes.append('Y0ur purch4s3 is -> penctf{w0rk_w1th_d4t4b4s3_1s_s0_h4rd_l0l}')
                db.update_money(session['username'], money - 5000)
            else:
                changes.append('N33d m0r3 m0n3y....') 
        money = db.get_money(session['username'])
        return render_template('wallet.html', money = money, changes = changes)
    else:
        return redirect(url_for('login'))

@app.route('/lottery', methods=['POST', 'GET'])
def lottery():
    if session.get('logged_in'):
        if request.method == 'POST':
            res = str([x for x in request.form.values()][0])
            return render_template( 'lottery.html', content = db.get_file(res))
        return render_template('lottery.html')
    return redirect(url_for('login'))

@app.route('/about', methods=['POST', 'GET'])
def about():
    return render_template('about.html')

@app.route('/refill_db', methods=['POST', 'GET'])
def refill_db():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            defense = dict(db.get_vuln())
            if request.method == 'POST':
                changes = list()
                db.refill()
                changes.append('Refill done!')
                return render_template('panel.html', users = db.get_all(), defense = defense, manage_changes = changes, logs = get_logs())
    return redirect(url_for('login'))

@app.route('/clear_db', methods=['POST', 'GET'])
def clear_db():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            defense = dict(db.get_vuln())
            if request.method == 'POST':
                changes = list()
                db.clear_table()
                changes.append('Table cleared!')
                return render_template('panel.html', users = db.get_all(), defense = defense, manage_changes = changes, logs = get_logs())
    return redirect(url_for('login'))

@app.route('/admin_transfer', methods=['POST', 'GET'])
def admin_transfer():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            if request.method == 'POST':
                changes = list()
                defense = dict(db.get_vuln())
                if request.form.get('username_receiver') and request.form.get('amount'):
                    db.transfer_admin_money(str(request.form.get('username_receiver')).capitalize(), request.form.get('amount'))
                    changes.append('Sended {}$ -> {}'.format(request.form.get('amount'), str(request.form.get('username_receiver')).capitalize()))
                else:
                    changes.append('Incorrect input..')
                return render_template('panel.html', users = db.get_all(), defense = defense, changes = changes, logs = get_logs())
    return redirect(url_for('login'))

@app.route('/panel', methods=['POST', 'GET'])
def panel():
    if session.get('logged_in'):
        if session["username"] == 'Admin':
            defense = dict(db.get_vuln())
            return render_template('panel.html', users = db.get_all(), defense = defense, logs = get_logs())
    return redirect(url_for('login'))

@app.route('/wallet', methods=['POST', 'GET'])
def wallet():
    if session.get('logged_in'):
        changes = list()
        res = 'All good'
        if request.method == 'POST':
            if request.form.get('username_receiver') and request.form.get('amount') and db.check_username(str(request.form.get('username_receiver')).capitalize()):
                res = db.transfer_money(session['username'], str(request.form.get('username_receiver')).capitalize(), str(request.form.get('amount')))
                if res:
                    changes.append('Sended {}$ -> {}'.format(request.form.get('amount'), str(request.form.get('username_receiver')).capitalize()))
                else:
                    changes.append('Money can\'t be negative..')
            else:
                changes.append('Incorrect input..')
        money = db.get_money(session['username'])
        return render_template('wallet.html', money = money, changes = changes), 200, {'Log': str(res)}
    return redirect(url_for('login'))

@app.route('/')
def home():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return redirect(url_for('about'))

@app.route('/signup',  methods=['POST', 'GET'])
def signup():
    if request.method == 'POST':
        db.register_user(str(request.form.get('username')).capitalize(), request.form.get('password'))
        return redirect(url_for('login'))
    return render_template('signup.html')

@app.route('/profile', methods=['POST', 'GET'])
def profile():
    if session.get('logged_in'):
        changes = list()
        if request.method == 'POST':
            if request.form.get('oldpassword') != '' and request.form.get('newpassword'):
                if db.check_password(session['username'], request.form.get('oldpassword')):
                    db.update_password(session['username'] ,request.form.get('newpassword'))
                    changes.append('Password was changed: {} -> {}'.format(request.form.get('oldpassword'), request.form.get('newpassword')))
                else:
                    changes.append('Incorrect old password..')
            if request.form.get('newusername'):
                if not db.check_username(session['username']):
                    db.update_username(session['username'], request.form.get('newusername').capitalize())
                    session['username'] = request.form.get('newusername')
                    changes.append('Username was changed: {} -> {}'.format(request.form.get('oldusername'), request.form.get('newusername')))
                else:
                    changes.append('This user already exist!')
        return render_template('settings.html', changes = changes)
    return redirect(url_for('login'))

@app.route('/login',  methods=['POST', 'GET'])
def login():
    if not session.get('logged_in'):
        if request.method == 'POST':
            res = db.check_user(str(request.form.get('username')).capitalize(), request.form.get('password'))
            if len(res) == 1:
                session['logged_in'] = True
                session['username'] = str(request.form.get('username')).capitalize()
                session['password'] = request.form.get('password')
                return redirect(url_for('about'))
            else:
                return render_template("login.html", incorrect = True), 201, {'Log': str(res)}
        return render_template('login.html')
    else:
        return render_template('about.html')

@app.route("/logout")
def logout():
    session['logged_in'] = False
    return home()

if __name__ == '__main__':
    app.config['SECRET_KEY'] = os.urandom(17)
    app.run()
